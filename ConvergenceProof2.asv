clear
clc

foldersource='C:\Users\ctc\Documents\GitHub\NewtonRaphsonHeatBalance\';
%foldersource='/Users/Shaun/Documents/GitHub/NewtonRaphsonHeatBalance/';
%foldersource='/mnt/HA/groups/nieburGrp/Shaun/NewtonRaphsonHeatBalance/';

conductorData=importfileAA(strcat(foldersource,'ConductorInfo.csv'));
[conductorCount,~]=size(conductorData);

conductorData.ResistanceACLowdegc=conductorData.ResistanceDCLowdegc;
conductorData.ResistanceACLowdegcMeter=conductorData.ResistanceACLowdegc./conductorData.MetersperResistanceInterval;
conductorData.ResistanceACHighdegcMeter=conductorData.ResistanceACHighdegc./conductorData.MetersperResistanceInterval;
conductorData.simulated=zeros(conductorCount,1);

Tref=25;
epsilons=0.9;
H=0;
phi=90*pi/180;
sigmab=5.6697e-8;
alphas=0.9;
spacer=15;
searchIncrement=0.1;

weatherPermutationCount=(spacer+1)^4;

maxpsol=1050;%*diam*alphas;
psols=zeros(weatherPermutationCount,1);
winds=zeros(weatherPermutationCount,1);
ambtemps=zeros(weatherPermutationCount,1);
currents=zeros(weatherPermutationCount,1);
tic
counter=0;
for psol=0:maxpsol/spacer:maxpsol
    for imagnitude=0:1/spacer:1
        for ambtemp=-33:98/spacer:65
            for Vw=0:10/spacer:10
                counter=counter+1;
                psols(counter)=psol;
                winds(counter)=Vw;
                ambtemps(counter)=ambtemp;
                currents(counter)=imagnitude;
            end
        end
    end
end


deltainfo=zeros(weatherPermutationCount,conductorCount);
delta1info=zeros(weatherPermutationCount,conductorCount);
rootinfo=zeros(weatherPermutationCount,conductorCount);
cinfo=zeros(weatherPermutationCount,conductorCount);
stepinfo=zeros(weatherPermutationCount,conductorCount);

for c1=1:12:conductorCount
    increment=11;
    if(c1+11>conductorCount)
        increment=conductorCount-c1;
    end
    for c=7:c1+increment
        disp(c)
        Prad1=zeros(weatherPermutationCount,1);
        Prad2=zeros(weatherPermutationCount,1);
        root=realmax.*ones(weatherPermutationCount,1);
        delta=zeros(weatherPermutationCount,1);
        delta1=zeros(weatherPermutationCount,1);
        cs=(-1*realmax).*ones(weatherPermutationCount,1);
        steps=zeros(weatherPermutationCount,1);
      
        cdata=conductorData(c,:);
        maxcurrent=ceil(1.5*cdata.AllowableAmpacity);
        diam=cdata.DiamCompleteCable*0.0254;
        beta=(cdata.ResistanceACHighdegcMeter-cdata.ResistanceACLowdegcMeter)/(cdata.HighTemp-cdata.LowTemp);
        alpha=cdata.ResistanceACHighdegcMeter-beta*cdata.HighTemp;  
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        if()
        for counter=1:weatherPermutationCount
            GuessTc=GetGuessTemp(currents(counter)*maxcurrent,ambtemps(counter),H,diam,phi,winds(counter),alpha,beta,epsilons,psols(counter)*diam*alphas);       
            [roott,~,~,Prad,~,~,~] =GetTempNewton(currents(counter)*maxcurrent,ambtemps(counter),H,diam,phi,winds(counter),alpha,beta,epsilons,psols(counter)*diam*alphas);
            
            root(counter,1)=roott;           
            topend=max(roott,GuessTc);
            bottomend=min(roott,GuessTc);

             tempSearch=(bottomend-10:searchIncrement:topend+10)';
             [searchCount,~]=size(tempSearch);
             tempSearch=[tempSearch,zeros(searchCount,6)];
             for i=1:searchCount
                 [Tc,I2R,I2Rprime,Prad,Pradprime,Pcon,Pconprime,A,m,C,n] =GetTempNewtonFirstIteration(currents(counter)*maxcurrent,ambtemps(counter),H,diam,phi,winds(counter),alpha,beta,epsilons,psols(counter)*diam*alphas,tempSearch(i,1));
                 tempSearch(i,2)=Tc;
                 tempSearch(i,3)=A;
                 tempSearch(i,4)=m;
                 tempSearch(i,5)=C;
                 tempSearch(i,6)=n;
             end
             
            rerun=1;
            reruncounter=0;
            while(rerun)
                rerun=0;
                reruncounter=reruncounter+1;
                if(reruncounter>5000)
                    msg='error condition!';
                    error(msg)
                end
                searchRes=tempSearch(tempSearch(:,1)>bottomend-delta(counter,1)& tempSearch(:,1)<topend+delta1(counter,1),:);
                [row,col]=size(searchRes);
                if(row>1)
                    if(max(searchRes(:,2))>topend+delta1(counter,1))
                        delta1(counter,1)=max(searchRes(:,2))-topend;
                        rerun=1;
                    end
                    if(min(searchRes(:,2))<bottomend-delta(counter,1))
                        delta(counter,1)=bottomend-min(searchRes(:,2));
                        rerun=1;
                    end
                end
            end
            [searchResCount,~]=size(searchRes);
            if(searchResCount>1)
                if (all(searchRes(:,3) == searchRes(1,3)) && all(searchRes(:,4) == searchRes(1,4)) && all(searchRes(:,5) == searchRes(1,5)) && all(searchRes(:,6) == searchRes(1,6)))
                    steps(counter)=-1;
                else
                    steps(counter)=1;
                end
                ctemp=-1*realmax*ones(searchResCount,searchResCount);
                for i=1:searchResCount-1
                    for j=i+1:searchResCount
                        ctemp(i,j)=abs(searchRes(i,2)-searchRes(j,2))/abs(searchRes(i,1)-searchRes(j,1));
                    end
                end
                cs(counter)=max(max(ctemp));
            end
        end
        
         rootinfo(:,c)=root;
         deltainfo(:,c)=delta;
         delta1info(:,c)=delta1;
         cinfo(:,c)=cs;
         stepinfo(:,c)=steps;
    end
    toc
end

csvwrite(strcat(foldersource,'rootinfo.csv'),rootinfo);
csvwrite(strcat(foldersource,'deltainfo.csv'),deltainfo);
csvwrite(strcat(foldersource,'delta1info.csv'),delta1info);
%csvwrite(strcat(foldersource,'psolinfo.csv'),psolinfo);
%csvwrite(strcat(foldersource,'windinfo.csv'),windinfo);
%csvwrite(strcat(foldersource,'ambtempinfo.csv'),ambtempinfo);
%csvwrite(strcat(foldersource,'currentinfo.csv'),currentinfo);
csvwrite(strcat(foldersource,'cinfo.csv'),cinfo);
csvwrite(strcat(foldersource,'stepinfo.csv'),stepinfo);

writetable(conductorData,'ConductorValidationResults.csv'); 
