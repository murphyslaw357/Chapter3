function method1Summary = importfile45(filename, startRow, endRow)
%IMPORTFILE2 Import numeric data from a text file as a matrix.
%   METHOD1SUMMARY = IMPORTFILE2(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   METHOD1SUMMARY = IMPORTFILE2(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   method1Summary = importfile2('method1_Summary.csv', 2, 17689597);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/04/20 13:06:56

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,7,8,9,10,11,12,13]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using the
% specified date format.
try
    dates{1} = datetime(dataArray{1}, 'Format', 'dd-MMM-y HH:mm:ss.SSS', 'InputFormat', 'dd-MMM-y HH:mm:ss.SSS');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{1} = cellfun(@(x) x(2:end-1), dataArray{1}, 'UniformOutput', false);
        dates{1} = datetime(dataArray{1}, 'Format', 'dd-MMM-y HH:mm:ss.SSS', 'InputFormat', 'dd-MMM-y HH:mm:ss.SSS');
    catch
        dates{1} = repmat(datetime([NaN NaN NaN]), size(dataArray{1}));
    end
end

dates = dates(:,1);

%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [2,3,4,5,6,7,8,9,10,11,12,13]);

%% Create output variable
method1Summary = table;
method1Summary.Timestamp = dates{:, 1};
method1Summary.VrMag = cell2mat(rawNumericColumns(:, 1));
method1Summary.VrPhase = cell2mat(rawNumericColumns(:, 2));
method1Summary.IrMag = cell2mat(rawNumericColumns(:, 3));
method1Summary.IrPhase = cell2mat(rawNumericColumns(:, 4));
method1Summary.VsMag = cell2mat(rawNumericColumns(:, 5));
method1Summary.VsPhase = cell2mat(rawNumericColumns(:, 6));
method1Summary.IsMag = cell2mat(rawNumericColumns(:, 7));
method1Summary.IsPhase = cell2mat(rawNumericColumns(:, 8));
method1Summary.FsMag = cell2mat(rawNumericColumns(:, 9));
method1Summary.FsPhase = cell2mat(rawNumericColumns(:, 10));
method1Summary.FrMag = cell2mat(rawNumericColumns(:, 11));
method1Summary.FrPhase = cell2mat(rawNumericColumns(:, 12));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% method1Summary.Timestamp=datenum(method1Summary.Timestamp);

