function PMUData = importfile43(filename, startRow, endRow)
%IMPORTFILE43 Import numeric data from a text file as a matrix.
%   PMUDATA = IMPORTFILE43(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   PMUDATA = IMPORTFILE43(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   PMUData = importfile43('PMUData.csv', 2, 6784);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/04/01 15:36:17

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format for each line of text:
%   column1: datetimes (%{dd-MMM-yyyy HH:mm:ss}D)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: datetimes (%{dd-MMM-yyyy HH:mm:ss}D)
%   column19: double (%f)
%	column20: text (%s)
%   column21: text (%s)
%	column22: text (%s)
%   column23: text (%s)
%	column24: text (%s)
%   column25: text (%s)
%	column26: text (%s)
%   column27: text (%s)
%	column28: double (%f)
%   column29: text (%s)
%	column30: text (%s)
%   column31: double (%f)
%	column32: double (%f)
%   column33: double (%f)
%	column34: double (%f)
%   column35: double (%f)
%	column36: double (%f)
%   column37: double (%f)
%	column38: double (%f)
%   column39: double (%f)
%	column40: double (%f)
%   column41: double (%f)
%	column42: double (%f)
%   column43: double (%f)
%	column44: double (%f)
%   column45: double (%f)
%	column46: double (%f)
%   column47: double (%f)
%	column48: double (%f)
%   column49: double (%f)
%	column50: double (%f)
%   column51: double (%f)
%	column52: double (%f)
%   column53: double (%f)
%	column54: double (%f)
%   column55: text (%s)
%	column56: text (%s)
%   column57: text (%s)
%	column58: text (%s)
%   column59: text (%s)
%	column60: text (%s)
%   column61: text (%s)
%	column62: text (%s)
%   column63: text (%s)
%	column64: text (%s)
%   column65: text (%s)
%	column66: text (%s)
%   column67: double (%f)
%	column68: double (%f)
%   column69: double (%f)
%	column70: double (%f)
%   column71: double (%f)
%	column72: double (%f)
%   column73: double (%f)
%	column74: double (%f)
%   column75: double (%f)
%	column76: double (%f)
%   column77: double (%f)
%	column78: double (%f)
%   column79: double (%f)
%	column80: double (%f)
%   column81: double (%f)
%	column82: double (%f)
%   column83: double (%f)
%	column84: double (%f)
%   column85: double (%f)
%	column86: double (%f)
%   column87: double (%f)
%	column88: double (%f)
%   column89: double (%f)
%	column90: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%{dd-MMM-yyyy HH:mm:ss}D%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%{dd-MMM-yyyy HH:mm:ss}D%f%s%s%s%s%s%s%s%s%f%s%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%s%s%s%s%s%s%s%s%s%s%s%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
PMUData = table(dataArray{1:end-1}, 'VariableNames', {'Time','VsMag','VsPhase','VrMag','VrPhase','IsMag','IsPhase','IrMag','IrPhase','VsMagStd','VsPhaseStd','VrMagStd','VrPhaseStd','IsMagStd','IsPhaseStd','IrMagStd','IrPhaseStd','Timestamp','Vs','Vr','Ir','Is','Z1','Y1','SendingPower','ReceivingPower','Loss','quality','ZMeasured','YMeasured','Psol','IR2','Pcon','Prad','avgtmp','avgvw','avgvdir','shorttemp','shortimpr','shortimpx','mediumtemp','mediumimpr','mediumimpx','mediumimpy','longdtemp','longdimpr','longdimpx','longdimpy','longntemp','longngamma','longnzc','ZHR','ZHX','ZHY','method2endcurrent','method2endvoltage','traditionalshortendcurrent','traditionalshortendvoltage','method3endcurrent','method3endvoltage','traditionalmediumendcurrent','traditionalmediumendvoltage','method4endcurrent','method4endvoltage','traditionallongdendcurrent','traditionallongdendvoltage','shortsendingvm','shortsendingvp','shortsendingim','shortsendingip','mediumsendingvm','mediumsendingvp','mediumsendingim','mediumsendingip','longdsendingvm','longdsendingvp','longdsendingim','longdsendingip','tradshortsendingvm','tradshortsendingvp','tradshortsendingim','tradshortsendingip','tradmediumsendingvm','tradmediumsendingvp','tradmediumsendingim','tradmediumsendingip','tradlongdsendingvm','tradlongdsendingvp','tradlongdsendingim','tradlongdsendingip'});

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% PMUData.Time=datenum(PMUData.Time);
% PMUData.Timestamp=datenum(PMUData.Timestamp);

